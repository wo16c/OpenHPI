Verzeichnis-Befehle in GIT V.8

pwd - print working directory
cd change directory
ls list
cd ~ - Heimatverzeichnis

GIT Konfigurationsdatei ansehen, anpassen
git config --list - GIT Konfigurationsdatei anzeigen
git config -- global user.email - Email in Konfigurationsdatei setzen
git config -- global user.name - -User Name in Konfigurationsdatei setzen

Repositorys erstellen und Dateien verwalten
git init - erstellt GIT-Repository
git status - Status des Repository anzeigen
git add . - alle Dateien zum Repository hinzufügen
git add dateiname.endung - definierte Datei zum Index hinzufügen
git commit -m "Kommentar" - Änderungen am Repository aufzeigen

Repository Online stellen
git remote add <alias> <url>(z.B. add repo http://github.copm/repo) - Repository online stellen
git remote rename <alias> <neuer alias> (z.B. repo projekt1) - Repository umbenennen 
git remote rm <alias> (rm = remove; entfernen) - Repsoitory entfernen
git remote rm -f (-f = force - Löschen erzwingen)

Respository zum bearbeiten "holen"
git clone <url> <alias> (z.B. https://github.com/repo repo) - Vollständige Kopie fastaller Dateien

Änderungen am Repository Online weiterleiten
git push origin/<branch> (z.B. origin/master) - Änderungen an das Online-Repository schicken

Änderungen aus dem Online-Repository holen
git fetch origin 
git merge origin/<branch> (z.B. origin/master) - Änderungen aus dem Online-Repository holen
git pull (git fetch + git merge)


Hinweise:
Mit dem Befehl git rm geheim.jpg wird die Datei auch aus dem Arbeitsverzeichnis entfernt, also gelöscht.
Um die Datei aus der Versionsverwaltung zu entfernen, aber auf der Festplatte zu behalten nutzt man git rm --cached geheim.jpg.

Falls die Datei nur aus der Staging Area entfernt werden soll, nutzt man git reset HEAD -- geheim.jpg

Branches und HEADS
git branch <name> erstellen einer neuen branch
git checkout <branchname> Wechsel des HEAD auf einen anderen Branch
-> git checkout -b <branchname> Neuanlage Branch und gleichzeitig Wechsel auf den neuen Branch !funktioiniert nicht bei vorhandenem Branch!

Merge -> Branches zusammenführen
git merge <branchname> Hinzufügen des Branches gem. Branchname zur derzeit aktuellen Branch (ggf. vorher anpassen z.B. auf Master wechseln)